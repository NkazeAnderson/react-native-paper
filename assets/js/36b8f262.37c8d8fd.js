"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7081],{81719:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var o=t(87462),a=t(67294),i=t(3905);const r={...t(64911)};function s(){const[e,n]=(0,a.useState)(""),t=Object.keys(r).filter((n=>n.includes(e.replace(/\s/g,"-"))||n.replace(/-/g,"").includes(e)));return a.createElement("div",{className:"icons-list-container"},a.createElement("input",{className:"icons-list-searchbar",type:"search",value:e,onChange:e=>{n(e.target.value)},placeholder:"Find icon by name\u2026"}),t.length?a.createElement("div",{className:"icons-list-results"},t.map((e=>a.createElement("div",{className:"icons-list-icon-container",key:e},a.createElement("span",{className:"icons-list-icon"},String.fromCodePoint(r[e])),a.createElement("span",{className:"icons-list-icon-name"},e))))):a.createElement("p",null,"No matching icon found :("))}const l={title:"Icons"},c="Icons",p={unversionedId:"guides/icons",id:"guides/icons",title:"Icons",description:"Configuring icons",source:"@site/docs/guides/03-icons.mdx",sourceDirName:"guides",slug:"/guides/icons",permalink:"/react-native-paper/docs/guides/icons",draft:!1,editUrl:"https://github.com/callstack/react-native-paper/tree/main/docs/docs/guides/03-icons.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Icons"},sidebar:"tutorialSidebar",previous:{title:"Theming",permalink:"/react-native-paper/docs/guides/theming"},next:{title:"Fonts",permalink:"/react-native-paper/docs/guides/fonts"}},u={},m=[{value:"Configuring icons",id:"configuring-icons",level:2},{value:"Using the <code>icon</code> prop",id:"using-the-icon-prop",level:2},{value:"1. An icon name",id:"1-an-icon-name",level:3},{value:"2. An image source",id:"2-an-image-source",level:3},{value:"3. A render function",id:"3-a-render-function",level:3},{value:"4. Use custom icons",id:"4-use-custom-icons",level:3},{value:"RTL support",id:"rtl-support",level:2}],d={toc:m};function h(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"icons"},"Icons"),(0,i.kt)("h2",{id:"configuring-icons"},"Configuring icons"),(0,i.kt)("p",null,"Many of the components require the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/oblador/react-native-vector-icons"},"react-native-vector-icons")," library to render correctly. If you're using Expo, you don't need to do anything extra, but if it's a vanilla React Native project, you need link the library as described in the getting started guide."),(0,i.kt)("p",null,"If you opted out of vector icons support using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/satya164/babel-plugin-optional-require"},"babel-plugin-optional-require"),", you won't be able to use icon names for the icon prop. Some components may not look correct without vector icons and might need extra configuration."),(0,i.kt)("h2",{id:"using-the-icon-prop"},"Using the ",(0,i.kt)("inlineCode",{parentName:"h2"},"icon")," prop"),(0,i.kt)("p",null,"Many components such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Button")," accept an ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," prop which is used to display an icon. The ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," prop supports the following types of values:"),(0,i.kt)("h3",{id:"1-an-icon-name"},"1. An icon name"),(0,i.kt)("p",null,"You can pass the name of an icon from ",(0,i.kt)("a",{parentName:"p",href:"https://materialdesignicons.com"},(0,i.kt)("inlineCode",{parentName:"a"},"MaterialCommunityIcons")),". This will use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/oblador/react-native-vector-icons"},(0,i.kt)("inlineCode",{parentName:"a"},"react-native-vector-icons"))," library to display the icon."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Button icon="camera">\n  Press me\n</Button>\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null,"See the list of supported icons"),(0,i.kt)(s,{mdxType:"IconsList"})),(0,i.kt)("h3",{id:"2-an-image-source"},"2. An image source"),(0,i.kt)("p",null,"You can pass an image source, such as an object of shape ",(0,i.kt)("inlineCode",{parentName:"p"},"{ uri: 'https://path.to' }")," or a local image: ",(0,i.kt)("inlineCode",{parentName:"p"},"require('../path/to/image.png')")," to use as an icon. The image might be rendered with a different color than the one provided depending on the component. If don't want this behavior, see the next example to pass an ",(0,i.kt)("inlineCode",{parentName:"p"},"Image")," element."),(0,i.kt)("p",null,"Remote image:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Button icon={{ uri: 'https://avatars0.githubusercontent.com/u/17571969?v=3&s=400' }}>\n  Press me\n</Button>\n")),(0,i.kt)("p",null,"Local image:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Button icon={require('../assets/chameleon.jpg')}>\n  Press me\n</Button>\n")),(0,i.kt)("h3",{id:"3-a-render-function"},"3. A render function"),(0,i.kt)("p",null,"You can pass a function which returns a react element to be used an icon. The function receives an object with ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," properties as its arguments. The element is used as is without any modification. However, it might get clipped if the provided element's size is bigger than what the component renders. It's up to you to make sure that the size of the element is correct."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Button\n  icon={({ size, color }) => (\n    <Image\n      source={require('../assets/chameleon.jpg')}\n      style={{ width: size, height: size, tintColor: color }}\n    />\n  )}\n>\n  Press me\n</Button>\n")),(0,i.kt)("h3",{id:"4-use-custom-icons"},"4. Use custom icons"),(0,i.kt)("p",null,"If you want to use icons other than ",(0,i.kt)("inlineCode",{parentName:"p"},"MaterialCommunityIcons")," you need to import the icons and pass it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"settings")," prop within ",(0,i.kt)("inlineCode",{parentName:"p"},"PaperProvider"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import AwesomeIcon from 'react-native-vector-icons/FontAwesome';\n// ...\n\n      <PaperProvider\n        settings={{\n          icon: props => <AwesomeIcon {...props} />,\n        }}\n        theme={this.state.theme}\n      >\n        // ...\n      </PaperProvider>\n")),(0,i.kt)("h2",{id:"rtl-support"},"RTL support"),(0,i.kt)("p",null,"If you want your icon to behave properly in a RTL environment, you can pass an object to the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," prop with shape: ",(0,i.kt)("inlineCode",{parentName:"p"},"{ source: { uri: 'https://path.to' }, direction : 'rtl' }"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"source")," can be any of the values that the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," prop accepts in ",(0,i.kt)("a",{parentName:"p",href:"#1.-an-icon-name"},"option 1")," and ",(0,i.kt)("a",{parentName:"p",href:"#2.-an-image-source"},"option 2"),". For ",(0,i.kt)("inlineCode",{parentName:"p"},"direction")," you have a few options:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"auto")," - uses the device language to determine if icon should be displayed from rtl. Uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"I18nManager")," module to get this info."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"rtl")," - flips the icon so that it is rtl, this is regardless of the device language."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"ltr")," - displays from ltr, even if in an rtl environment.")),(0,i.kt)("p",null,"Example for using an image source:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Button icon={{ source: { uri: 'https://avatars0.githubusercontent.com/u/17571969?v=3&s=400' }, direction: 'rtl' }}>\n  Press me\n</Button>\n")),(0,i.kt)("p",null,"Example for using an icon name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Button icon={{ source: \"add-a-photo\", direction: 'rtl' }}>\n  Press me\n</Button>\n")),(0,i.kt)("p",null,"You can also use a render function. Along with ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"color"),", you have access to ",(0,i.kt)("inlineCode",{parentName:"p"},"direction")," which will either be ",(0,i.kt)("inlineCode",{parentName:"p"},"'rtl'")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"'ltr'"),". You can then decide how to render your icon component accordingly."),(0,i.kt)("p",null,"Example of using a render function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Button\n  icon={({ size, color, direction }) => (\n    <Image\n      source={require('../assets/chameleon.jpg')}\n      style={[\n        {\n          transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n        },\n        {\n          width: size,\n          height: size,\n          tintColor: color\n        }\n      ]}\n    />\n  )}\n>\n  Press me\n</Button>\n")))}h.isMDXComponent=!0}}]);