"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3998],{60205:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=a(87462),i=(a(67294),a(3905));const o={title:"Using BottomNavigation with React Navigation"},r=void 0,l={unversionedId:"guides/bottom-navigation",id:"guides/bottom-navigation",title:"Using BottomNavigation with React Navigation",description:"A material-design themed tab bar on the bottom of the screen that lets you switch between different routes with animation. Routes are lazily initialized - their screen components are not mounted until they are first focused.",source:"@site/docs/guides/09-bottom-navigation.md",sourceDirName:"guides",slug:"/guides/bottom-navigation",permalink:"/react-native-paper/docs/guides/bottom-navigation",draft:!1,editUrl:"https://github.com/callstack/react-native-paper/tree/main/docs/docs/guides/09-bottom-navigation.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Using BottomNavigation with React Navigation"},sidebar:"tutorialSidebar",previous:{title:"Theming with React Navigation",permalink:"/react-native-paper/docs/guides/theming-with-react-navigation"},next:{title:"Integrate AppBar with React Navigation",permalink:"/react-native-paper/docs/guides/react-navigation"}},s={},d=[{value:"API Definition",id:"api-definition",level:2},{value:"Props",id:"props",level:3},{value:"<code>id</code>",id:"id",level:4},{value:"<code>initialRouteName</code>",id:"initialroutename",level:4},{value:"<code>screenOptions</code>",id:"screenoptions",level:4},{value:"<code>backBehavior</code>",id:"backbehavior",level:4},{value:"<code>shifting</code>",id:"shifting",level:4},{value:"<code>labeled</code>",id:"labeled",level:4},{value:"<code>activeColor</code>",id:"activecolor",level:4},{value:"<code>inactiveColor</code>",id:"inactivecolor",level:4},{value:"<code>barStyle</code>",id:"barstyle",level:4},{value:"<code>theme</code>",id:"theme",level:4},{value:"Options",id:"options",level:3},{value:"<code>title</code>",id:"title",level:4},{value:"<code>tabBarIcon</code>",id:"tabbaricon",level:4},{value:'<code>tabBarColor</code> <div class="badge badge-deprecated">In v5.x works only with theme version 2.</div>',id:"tabbarcolor-in-v5x-works-only-with-theme-version-2",level:4},{value:"<code>tabBarLabel</code>",id:"tabbarlabel",level:4},{value:"<code>tabBarBadge</code>",id:"tabbarbadge",level:4},{value:"<code>tabBarAccessibilityLabel</code>",id:"tabbaraccessibilitylabel",level:4},{value:"<code>tabBarTestID</code>",id:"tabbartestid",level:4},{value:"Events",id:"events",level:3},{value:"<code>tabPress</code>",id:"tabpress",level:4},{value:"Helpers",id:"helpers",level:3},{value:"<code>jumpTo</code>",id:"jumpto",level:4},{value:"Example",id:"example",level:2}],p={toc:d};function c(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A material-design themed tab bar on the bottom of the screen that lets you switch between different routes with animation. Routes are lazily initialized - their screen components are not mounted until they are first focused."),(0,i.kt)("p",null,"This wraps the ",(0,i.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-paper/docs/components/BottomNavigation/"},(0,i.kt)("inlineCode",{parentName:"a"},"BottomNavigation"))," component from ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-paper"),", however if you ",(0,i.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-paper/docs/guides/getting-started/"},"configure the Babel plugin"),", it won't include the whole library in your bundle."),(0,i.kt)("img",{src:"/react-native-paper/screenshots/material-bottom-tabs.gif",style:{width:"420px",maxWidth:"100%",margin:"16px 0"}}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To use this navigator, ensure that you have ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/getting-started"},(0,i.kt)("inlineCode",{parentName:"a"},"@react-navigation/native")," and its dependencies (follow this guide)"),":")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"For a complete example please visit ",(0,i.kt)("inlineCode",{parentName:"p"},"createMaterialBottomTabNavigator")," ",(0,i.kt)("a",{parentName:"p",href:"https://snack.expo.dev/@react-native-paper/creatematerialbottomtabnavigator"},"snack"))),(0,i.kt)("h2",{id:"api-definition"},"API Definition"),(0,i.kt)("p",null,"To use this tab navigator, import it from ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-paper/react-navigation"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { createMaterialBottomTabNavigator } from \'react-native-paper/react-navigation\';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name="Home" component={HomeScreen} />\n      <Tab.Screen name="Settings" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"For a complete usage guide please visit ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/tab-based-navigation/"},"Tab Navigation"))),(0,i.kt)("h3",{id:"props"},"Props"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Tab.Navigator")," component accepts following props:"),(0,i.kt)("h4",{id:"id"},(0,i.kt)("inlineCode",{parentName:"h4"},"id")),(0,i.kt)("p",null,"Optional unique ID for the navigator. This can be used with ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-prop#getparent"},(0,i.kt)("inlineCode",{parentName:"a"},"navigation.getParent"))," to refer to this navigator in a child navigator."),(0,i.kt)("h4",{id:"initialroutename"},(0,i.kt)("inlineCode",{parentName:"h4"},"initialRouteName")),(0,i.kt)("p",null,"The name of the route to render on first load of the navigator."),(0,i.kt)("h4",{id:"screenoptions"},(0,i.kt)("inlineCode",{parentName:"h4"},"screenOptions")),(0,i.kt)("p",null,"Default options to use for the screens in the navigator."),(0,i.kt)("h4",{id:"backbehavior"},(0,i.kt)("inlineCode",{parentName:"h4"},"backBehavior")),(0,i.kt)("p",null,"This controls what happens when ",(0,i.kt)("inlineCode",{parentName:"p"},"goBack")," is called in the navigator. This includes pressing the device's back button or back gesture on Android."),(0,i.kt)("p",null,"It supports the following values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"firstRoute")," - return to the first screen defined in the navigator (default)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initialRoute")," - return to initial screen passed in ",(0,i.kt)("inlineCode",{parentName:"li"},"initialRouteName")," prop, if not passed, defaults to the first screen"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"order")," - return to screen defined before the focused screen"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"history")," - return to last visited screen in the navigator; if the same screen is visited multiple times, the older entries are dropped from the history"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"none")," - do not handle back button")),(0,i.kt)("h4",{id:"shifting"},(0,i.kt)("inlineCode",{parentName:"h4"},"shifting")),(0,i.kt)("p",null,"Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label."),(0,i.kt)("p",null,"By default, this is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," when you have more than 3 tabs. Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"shifting={false}")," to explicitly disable this animation, or ",(0,i.kt)("inlineCode",{parentName:"p"},"shifting={true}")," to always use this animation."),(0,i.kt)("h4",{id:"labeled"},(0,i.kt)("inlineCode",{parentName:"h4"},"labeled")),(0,i.kt)("p",null,"Whether to show labels in tabs. When ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", only icons will be displayed."),(0,i.kt)("h4",{id:"activecolor"},(0,i.kt)("inlineCode",{parentName:"h4"},"activeColor")),(0,i.kt)("p",null,"Custom color for icon and label in the active tab."),(0,i.kt)("h4",{id:"inactivecolor"},(0,i.kt)("inlineCode",{parentName:"h4"},"inactiveColor")),(0,i.kt)("p",null,"Custom color for icon and label in the inactive tab."),(0,i.kt)("h4",{id:"barstyle"},(0,i.kt)("inlineCode",{parentName:"h4"},"barStyle")),(0,i.kt)("p",null,"Style for the bottom navigation bar. You can pass custom background color here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Tab.Navigator\n  initialRouteName="Home"\n  activeColor="#f0edf6"\n  inactiveColor="#3e2465"\n  barStyle={{ backgroundColor: \'#694fad\' }}\n>\n  {/* ... */}\n</Tab.Navigator>\n')),(0,i.kt)("p",null,"If you have a translucent navigation bar on Android, you can also set a bottom padding here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Tab.Navigator\n  initialRouteName="Home"\n  activeColor="#f0edf6"\n  inactiveColor="#3e2465"\n  barStyle={{ paddingBottom: 48 }}\n>\n  {/* ... */}\n</Tab.Navigator>\n')),(0,i.kt)("h4",{id:"theme"},(0,i.kt)("inlineCode",{parentName:"h4"},"theme")),(0,i.kt)("p",null,"Enables the customization of default theme attributes (e.g. colors) or facilitates the utilization of a personalized custom theme."),(0,i.kt)("h3",{id:"options"},"Options"),(0,i.kt)("p",null,"The following ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/screen-options"},"options")," can be used to configure the screens in the navigator:"),(0,i.kt)("h4",{id:"title"},(0,i.kt)("inlineCode",{parentName:"h4"},"title")),(0,i.kt)("p",null,"Generic title that can be used as a fallback for ",(0,i.kt)("inlineCode",{parentName:"p"},"headerTitle")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tabBarLabel"),"."),(0,i.kt)("h4",{id:"tabbaricon"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarIcon")),(0,i.kt)("p",null,"Function that given ",(0,i.kt)("inlineCode",{parentName:"p"},"{ focused: boolean, color: string }")," returns a React.Node, to display in the tab bar."),(0,i.kt)("h4",{id:"tabbarcolor-in-v5x-works-only-with-theme-version-2"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarColor")," ",(0,i.kt)("div",{class:"badge badge-deprecated"},"In v5.x works only with theme version 2.")),(0,i.kt)("p",null,"Color for the tab bar when the tab corresponding to the screen is active. Used for the ripple effect. This is only supported when ",(0,i.kt)("inlineCode",{parentName:"p"},"shifting")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h4",{id:"tabbarlabel"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarLabel")),(0,i.kt)("p",null,"Title string of a tab displayed in the tab bar. When undefined, scene ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," is used. To hide, see ",(0,i.kt)("inlineCode",{parentName:"p"},"labeled")," option in the previous section."),(0,i.kt)("h4",{id:"tabbarbadge"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarBadge")),(0,i.kt)("p",null,"Badge to show on the tab icon, can be ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to show a dot, ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," to show text."),(0,i.kt)("h4",{id:"tabbaraccessibilitylabel"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarAccessibilityLabel")),(0,i.kt)("p",null,"Accessibility label for the tab button. This is read by the screen reader when the user taps the tab. It's recommended to set this if you don't have a label for the tab."),(0,i.kt)("h4",{id:"tabbartestid"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarTestID")),(0,i.kt)("p",null,"ID to locate this tab button in tests."),(0,i.kt)("h3",{id:"events"},"Events"),(0,i.kt)("p",null,"The navigator can ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-events"},"emit events")," on certain actions. Supported events are:"),(0,i.kt)("h4",{id:"tabpress"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabPress")),(0,i.kt)("p",null,"This event is fired when the user presses the tab button for the current screen in the tab bar. By default a tab press does several things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the tab is not focused, tab press will focus that tab"),(0,i.kt)("li",{parentName:"ul"},"If the tab is already focused:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If the screen for the tab renders a scroll view, you can use ",(0,i.kt)("a",{parentName:"li",href:"https://reactnavigation.org/docs/use-scroll-to-top"},(0,i.kt)("inlineCode",{parentName:"a"},"useScrollToTop"))," to scroll it to top"),(0,i.kt)("li",{parentName:"ul"},"If the screen for the tab renders a stack navigator, a ",(0,i.kt)("inlineCode",{parentName:"li"},"popToTop")," action is performed on the stack")))),(0,i.kt)("p",null,"To prevent the default behavior, you can call ",(0,i.kt)("inlineCode",{parentName:"p"},"event.preventDefault"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"React.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', (e) => {\n    // Prevent default behavior\n\n    e.preventDefault();\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n")),(0,i.kt)("h3",{id:"helpers"},"Helpers"),(0,i.kt)("p",null,"The tab navigator adds the following methods to the navigation prop:"),(0,i.kt)("h4",{id:"jumpto"},(0,i.kt)("inlineCode",{parentName:"h4"},"jumpTo")),(0,i.kt)("p",null,"Navigates to an existing screen in the tab navigator. The method accepts following arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," - ",(0,i.kt)("em",{parentName:"li"},"string")," - Name of the route to jump to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,i.kt)("em",{parentName:"li"},"object")," - Screen params to pass to the destination route.")),(0,i.kt)("samp",{id:"material-tab-jump-to"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"navigation.jumpTo('Profile', { name: 'Micha\u015b' });\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { createMaterialBottomTabNavigator } from \'react-native-paper/react-navigation\';\nimport MaterialCommunityIcons from \'react-native-vector-icons/MaterialCommunityIcons\';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator\n      initialRouteName="Feed"\n      activeColor="#e91e63"\n      barStyle={{ backgroundColor: \'tomato\' }}\n    >\n      <Tab.Screen\n        name="Feed"\n        component={Feed}\n        options={{\n          tabBarLabel: \'Home\',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name="home" color={color} size={26} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name="Notifications"\n        component={Notifications}\n        options={{\n          tabBarLabel: \'Updates\',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name="bell" color={color} size={26} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name="Profile"\n        component={Profile}\n        options={{\n          tabBarLabel: \'Profile\',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name="account" color={color} size={26} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}\n')))}c.isMDXComponent=!0}}]);