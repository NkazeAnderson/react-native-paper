"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4270],{96172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>R,contentTitle:()=>L,default:()=>I,frontMatter:()=>E,metadata:()=>j,toc:()=>B});var a=n(87462),r=n(67294),o=n(3905),i=n(6767),l=n.n(i),p=n(30780);const m=e=>{let{value:t,onValueChange:n,color:a}=e;const o=t?a:"none";return r.createElement(r.Fragment,null,r.createElement("input",{checked:t,onChange:n,className:"react-switch-checkbox",id:"react-switch-new",type:"checkbox"}),r.createElement("label",{style:{background:o},className:"react-switch-label",htmlFor:"react-switch-new"},r.createElement("span",{className:"react-switch-button"})))};var s=n(17521),c=n(36906);const u=.12,d=.38,h=[.05,.08,.11,.12,.14],k=["elevation","shadow","scrim","inverseSurface","inverseOnSurface","surfaceDisabled","onSurfaceDisabled","outlineVariant","backdrop","inversePrimary"],g=function(e,t){return void 0===t&&(t="light"),(0,s.qj)((0,s.fq)(e)).schemes[t].toJSON()},N=e=>Object.fromEntries(Object.entries(e).map((e=>{let[t,n]=e;return[t,l()(n).rgb().string()]}))),y=function(e,t){return void 0===t&&(t="light"),n=g(e,t),Object.fromEntries(Object.entries(n).map((e=>{let[t,n]=e;return[t,l()(n).hex()]})));var n},f=(e,t)=>{if("outline"===e)return t.surface;if(e.startsWith("on")){return t[(0,c.Z)(e.slice(2))]}return t[`on${(0,c.Z)(e,{pascalCase:!0})}`]},v=e=>{let{primary:t,secondary:n,tertiary:a,type:r,custom:o}=e;const i=g(t,r);if(n){const e=g(n,r);i.secondary=e.primary,i.onSecondary=e.onPrimary,i.secondaryContainer=e.primaryContainer,i.onSecondaryContainer=e.onPrimaryContainer}if(a){const e=g(a,r);i.tertiary=e.primary,i.onTertiary=e.onPrimary,i.tertiaryContainer=e.primaryContainer,i.onTertiaryContainer=e.onPrimaryContainer}const p=N(i),m=(e=>{let t={level0:"transparent"};const{primary:n,surface:a}=e;for(let r=0;r<h.length;r++)t[`level${r+1}`]=l()(a).mix(l()(n),Number(h[r])).rgb().string();return t})(i),k=(e=>{const{palettes:t}=(0,s.qj)(e.primary);return{surfaceDisabled:l()(e.onSurface).alpha(u).rgb().string(),onSurfaceDisabled:l()(e.onSurface).alpha(d).rgb().string(),backdrop:l()(t.neutralVariant.tone(20)).alpha(.4).rgb().string()}})(i),y=((e,t)=>{if(null==t||!t.length)return{};let n={};for(let[a,r]of t)if(a){const t=N(g(r,e)),o=(0,c.Z)(a),i=(0,c.Z)(a,{pascalCase:!0});n[o]=t.primary,n[`on${i}`]=t.onPrimary,n[`${o}Container`]=t.primaryContainer,n[`on${i}Container`]=t.onPrimaryContainer}return n})(r,o);return{...p,elevation:m,...k,...y}},C="#663399",b=["#FBC02D","#FFA000","#F57C00","#E64A19","#D32F2F","#C2185B","#7B1FA2","#512DA8","#303F9F","#1976D2","#0288D1","#0097A7","#00796B","#388E3C","#689F38","#AFB42B","#5D4037","#616161","#455A64"],w=e=>{let{color:t,setColor:n,additional:a}=e;const[o,i]=(0,r.useState)(!1),m=l()(t).isDark()?"#fff":"#000";return r.createElement("div",{className:"color-picker-anchor"},r.createElement("button",{className:a?"color-picker-button-additional":"color-picker-button",style:{background:t,color:m},onClick:()=>i(!0)},t),o?r.createElement("div",null,r.createElement("div",{className:"color-picker-cover",onClick:()=>i(!1)}),r.createElement("div",{className:"color-picker-popup"},r.createElement(p.if,{color:t,onChangeComplete:e=>n(e.hex),colors:b}))):null)},T=e=>{let{color:t,setColor:n}=e;return r.createElement("tr",null,r.createElement("td",null,"Primary"),r.createElement("td",{className:"color-picker-button-col"},r.createElement(w,{color:t,setColor:n})))},P=e=>{let{color:t,base:n,setColor:a,children:o}=e;return t&&t!==n?r.createElement("tr",null,r.createElement("td",null,o," (custom)"),r.createElement("td",null,r.createElement(w,{color:t,setColor:a,additional:!0}),r.createElement("button",{className:"color-picker-button-cancel",onClick:()=>a(void 0)},"\u2715"))):r.createElement("tr",null,r.createElement("td",null,o),r.createElement("td",null,r.createElement(w,{color:n,setColor:a})))},D=e=>{let{theme:t,children:n}=e;const[a,o]=(0,r.useState)(!1),i=()=>JSON.stringify({colors:t},null,2);return r.createElement("div",null,r.createElement("div",{className:"color-picker-schema-copy-header"},r.createElement("h4",null,n),r.createElement("button",{onClick:()=>{navigator.clipboard.writeText(i()),o(!0),setTimeout((()=>o(!1)),1e3)},className:"color-picker-action-button"},a?"copied":"copy")),r.createElement("pre",null,r.createElement("code",{className:"language-json"},i())))};let A=0;const S=e=>{let{customColors:t,setCustomColors:n}=e;const a=(e,t)=>{n((n=>n.map((n=>n.key===e?{...n,hex:t}:n))))},o=(e,t)=>{n((n=>n.map((n=>n.key===e?{...n,name:t}:n))))},i=e=>n((t=>t.filter((t=>e!==t.key))));return r.createElement(r.Fragment,null,t.map(((e,t)=>{let{key:n,name:l,hex:p}=e;return r.createElement(M,{key:n,uniqKey:n,name:l,index:t,color:p,setCustomColor:a,deleteCustomColor:i,setCustomName:o})})),r.createElement("tr",null,r.createElement("td",{colSpan:2,align:"center"},r.createElement("button",{onClick:()=>{const e={key:"custom"+ ++A,name:`custom${t.length}`,hex:C};n((t=>[...t,e]))},className:"color-picker-action-button"},"+ Add custom color"))))},M=e=>{let{name:t,color:n,index:a,uniqKey:o,setCustomColor:i,deleteCustomColor:l,setCustomName:p}=e;const m=e=>{e.preventDefault(),p(o,e.target.value)};return t?r.createElement("tr",null,r.createElement("td",null,"Custom color #",a+1,":"," ",r.createElement("input",{value:t,onChange:m,className:"color-picker-name-input"})),r.createElement("td",null,r.createElement(w,{color:n,setColor:e=>i(o,e),additional:!0}),r.createElement("button",{className:"color-picker-button-cancel",onClick:()=>l(o)},"\u2715"))):r.createElement("tr",null,r.createElement("td",{colSpan:2},"Custom color #",a+1,":"," ",r.createElement("input",{value:t,onChange:m,className:"color-picker-name-input"}),r.createElement("button",{className:"color-picker-button-cancel",onClick:()=>l(o)},"\u2715")))},x=()=>{const[e,t]=(0,r.useState)(!1),[n,a]=(0,r.useState)(C),[o,i]=(0,r.useState)(),[l,p]=(0,r.useState)(),[s,c]=(0,r.useState)([]),u=e?"dark":"light",d=y(n),h=(g={primary:n,secondary:o,tertiary:l,custom:s.map((e=>{let{name:t,hex:n}=e;return[t,n]}))},{light:v({...g,type:"light"}),dark:v({...g,type:"dark"})});var g;return r.createElement("div",null,r.createElement("table",{className:"color-picker"},r.createElement("tbody",null,r.createElement(T,{color:n,setColor:a}),r.createElement(P,{color:o,setColor:i,base:d.secondary},"Secondary"),r.createElement(P,{color:l,setColor:p,base:d.tertiary},"Tertiary"),r.createElement(S,{customColors:s,setCustomColors:c}))),r.createElement("div",{className:"color-picker-preview",style:{background:h[u].background,color:h[u].onBackground,borderColor:h[u].outlineVariant}},r.createElement("div",{className:"color-picker-preview-header"},r.createElement("h3",null,"Preview"),r.createElement("div",null,r.createElement("p",null,"Dark Mode:"),r.createElement(m,{value:e,color:"green",onValueChange:()=>t(!e)}))),r.createElement("div",{className:"color-picker-grid-column"},(e=>{const t={...e};for(let n of k)delete t[n];return delete t.elevation,Object.entries(t)})(h[u]).map((e=>{let[t,n]=e;const a="outline"===t?"span 2":void 0;return r.createElement("div",{key:t,className:"color-picker-preview-box",style:{backgroundColor:n,color:f(t,h[u]),gridColumn:a}},t)})))),r.createElement("div",{className:"color-picker-themes"},r.createElement(D,{theme:h.light},"Light theme"),r.createElement(D,{theme:h.dark},"Dark theme")))},E={title:"Theming"},L="Theming",j={unversionedId:"guides/theming",id:"guides/theming",title:"Theming",description:'To observe changes related to switching between light and dark mode in the app, ensure that the "Override force-dark" feature in the "developer options" settings on your Android device is not overridden.',source:"@site/docs/guides/02-theming.mdx",sourceDirName:"guides",slug:"/guides/theming",permalink:"/react-native-paper/docs/guides/theming",draft:!1,editUrl:"https://github.com/callstack/react-native-paper/tree/main/docs/docs/guides/02-theming.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Theming"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/react-native-paper/docs/guides/getting-started"},next:{title:"Icons",permalink:"/react-native-paper/docs/guides/icons"}},R={},B=[{value:"Applying a theme to the whole app",id:"applying-a-theme-to-the-whole-app",level:2},{value:"Accessing theme properties",id:"accessing-theme-properties",level:2},{value:"Theme properties",id:"theme-properties",level:2},{value:"Extending the theme",id:"extending-the-theme",level:2},{value:"Creating dynamic theme colors",id:"creating-dynamic-theme-colors",level:2},{value:"Using schemes",id:"using-schemes",level:3},{value:"Sync dynamic colors with system colors",id:"sync-dynamic-colors-with-system-colors",level:3},{value:"Adapting React Navigation theme",id:"adapting-react-navigation-theme",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Simple built-in theme overrides",id:"simple-built-in-theme-overrides",level:3},{value:"Advanced theme overrides",id:"advanced-theme-overrides",level:3},{value:"Material Design 2",id:"material-design-2",level:2},{value:"Simple setup",id:"simple-setup",level:3},{value:"Advanced setup",id:"advanced-setup",level:3},{value:"Typescript",id:"typescript-1",level:3},{value:"Migrating to Material You",id:"migrating-to-material-you",level:3},{value:"Applying a theme to a paper component",id:"applying-a-theme-to-a-paper-component",level:2},{value:"Customizing all instances of a component",id:"customizing-all-instances-of-a-component",level:2},{value:"Dark Theme",id:"dark-theme",level:2},{value:"Gotchas",id:"gotchas",level:2}],q={toc:B};function I(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},q,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"theming"},"Theming"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"To observe changes related to switching between light and dark mode in the app, ensure that the ",(0,o.kt)("i",null,'"Override force-dark"')," feature in the ",(0,o.kt)("i",null,'"developer options"')," settings on your Android device is ",(0,o.kt)("b",null,"not overridden"),".")),(0,o.kt)("h2",{id:"applying-a-theme-to-the-whole-app"},"Applying a theme to the whole app"),(0,o.kt)("p",null,"To support custom themes, paper exports a ",(0,o.kt)("inlineCode",{parentName:"p"},"PaperProvider")," component. You need to wrap your root component with the provider to be able to support themes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nexport default function Main() {\n  return (\n    <PaperProvider>\n      <App />\n    </PaperProvider>\n  );\n}\n")),(0,o.kt)("p",null,"By default React Native Paper will apply the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/callstack/react-native-paper/blob/main/src/styles/themes/v3/LightTheme.tsx"},"Material You theme (MD3)")," if no ",(0,o.kt)("inlineCode",{parentName:"p"},"theme")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"version")," prop is passed to to the ",(0,o.kt)("inlineCode",{parentName:"p"},"PaperProvider"),"."),(0,o.kt)("h2",{id:"accessing-theme-properties"},"Accessing theme properties"),(0,o.kt)("p",null,"Use the built-in ",(0,o.kt)("inlineCode",{parentName:"p"},"useTheme()")," hook to get access to the theme's variables:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { useTheme } from 'react-native-paper';\n\nexport default function PaymentScreen() {\n  const theme = useTheme();\n\n  return <View style={{ backgroundColor: theme.colors.primary }} />;\n}\n")),(0,o.kt)("p",null,"You can also use the ",(0,o.kt)("inlineCode",{parentName:"p"},"withTheme()")," HOC exported from the library. If you wrap your component with the HOC, you'll receive the theme as a prop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { withTheme } from 'react-native-paper';\n\nfunction PaymentScreen({ theme }) {\n  return <View style={{ backgroundColor: theme.colors.primary }} />;\n}\n\nexport default withTheme(PaymentScreen);\n")),(0,o.kt)("h2",{id:"theme-properties"},"Theme properties"),(0,o.kt)("p",null,"You can change the theme prop dynamically and all the components will automatically update to reflect the new theme."),(0,o.kt)("p",null,"A theme usually contains the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"dark")," (",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),"): whether this is a dark theme or light theme.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"version"),": specify which design system components should follow in the app"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"3 - new Material You (MD3)"),(0,o.kt)("li",{parentName:"ul"},"2 - previous Material Design (MD2)"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"mode")," (",(0,o.kt)("inlineCode",{parentName:"p"},"'adaptive' | 'exact'"),"): color mode for dark theme (See ",(0,o.kt)("a",{parentName:"p",href:"#dark-theme"},"Dark Theme"),").")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"roundness")," (",(0,o.kt)("inlineCode",{parentName:"p"},"number"),"): roundness of common elements, such as buttons.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"colors")," (",(0,o.kt)("inlineCode",{parentName:"p"},"object"),"): various colors used throughout different elements."),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"The primary key color is used to derive roles for key components across the UI, such as the FAB, prominent buttons, active states, as well as the tint of elevated surfaces.")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"primary")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onPrimary")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"primaryContainer")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onPrimaryContainer"))),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"The secondary key color is used for less prominent components in the UI such as filter chips, while expanding the opportunity for color expression.")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"secondary")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onSecondary")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"secondaryContainer")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onSecondaryContainer"))),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"The tertiary key color is used to derive the roles of contrasting accents that can be used to balance primary and secondary colors or bring heightened attention to an element.")),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"The tertiary color role is left for teams to use at their discretion and is intended to support broader color expression in products.")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tertiary")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onTertiary")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tertiaryContainer")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onTertiaryContainer"))),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"The neutral key color is used to derive the roles of surface and background, as well as high emphasis text and icons.")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"background")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onBackground")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"surface")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onSurface"))),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"The neutral variant key color is used to derive medium emphasis text and icons, surface variants, and component outlines.")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"surfaceVariant")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onSurfaceVariant")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"outline"))),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"In addition to the accent and neutral key color, the color system includes a semantic color role for error")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onError")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"errorContainer")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onErrorContainer"))),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"Surfaces at elevation levels 0-5 are tinted via color overlays based on the primary color, such as app bars or menus. The addition of a grade from 0-5 introduces tonal variation to the surface baseline.")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"elevation")," (",(0,o.kt)("inlineCode",{parentName:"li"},"object"),")",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"level0")," - transparent"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"level1")," - 5% opacity"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"level2")," - 8% opacity"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"level3")," - 11% opacity"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"level4")," - 12% opacity"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"level5")," - 14% opacity")))),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"Colors for disabled state")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"surfaceDisabled")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onSurfaceDisabled"))),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"These additional role mappings exist in a scheme and are mapped to components where needed.")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"shadow")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"inverseOnSurface")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"inverseSurface")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"inversePrimary")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"backdrop")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"fonts")," (",(0,o.kt)("inlineCode",{parentName:"p"},"object"),"): various fonts styling properties under the text variant key used in component."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"[",(0,o.kt)("inlineCode",{parentName:"li"},"variant")," e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"labelMedium"),"]"," (",(0,o.kt)("inlineCode",{parentName:"li"},"object"),"):",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fontFamily")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"letterSpacing")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fontWeight")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lineHeight")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fontSize")))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"animation")," (",(0,o.kt)("inlineCode",{parentName:"p"},"object"),")"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scale")," - scale for all animations")))),(0,o.kt)("p",null,"When creating a custom theme, you will need to provide all of these properties."),(0,o.kt)("p",null,"If you don't use a custom theme, Paper will automatically turn animations on/off, depending on device settings."),(0,o.kt)("p",null,"Otherwise, your custom theme will need to handle it manually, using React Native's ",(0,o.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/accessibilityinfo"},"AccessibilityInfo API"),"."),(0,o.kt)("h2",{id:"extending-the-theme"},"Extending the theme"),(0,o.kt)("p",null,"Keeping your own properties in the theme is fully supported by our library:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport {\n  MD3LightTheme as DefaultTheme,\n  PaperProvider,\n} from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...DefaultTheme,\n  // Specify custom property\n  myOwnProperty: true,\n  // Specify custom property in nested object\n  colors: {\n    ...DefaultTheme.colors,\n    myOwnColor: '#BADA55',\n  },\n};\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n")),(0,o.kt)("h2",{id:"creating-dynamic-theme-colors"},"Creating dynamic theme colors"),(0,o.kt)("p",null,"Dynamic Color Themes allows for generating two color schemes lightScheme and darkScheme, based on the provided source color.\nCreated schemes are following the Material Design 3 color system and covering colors structure from the Paper theme. User may generate these schemes using the following tool:"),(0,o.kt)(x,{mdxType:"DynamicColorTheme"}),(0,o.kt)("br",null),(0,o.kt)("p",null,"Passed source color into the util is translated into tones to automatically provide the range of tones that map to color roles. "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"customColors",src:n(14964).Z,width:"1610",height:"696"})),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Source: ",(0,o.kt)("a",{parentName:"em",href:"https://m3.material.io/styles/color/the-color-system/custom-colors"},"Material You Color System"))),(0,o.kt)("h3",{id:"using-schemes"},"Using schemes"),(0,o.kt)("p",null,"Once we have copied the color schemes from the generated JSON above, we can use by passing it to the colors in ",(0,o.kt)("inlineCode",{parentName:"p"},"theme")," object as below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport {\n  MD3LightTheme as DefaultTheme,\n  PaperProvider,\n} from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...DefaultTheme,\n  colors: yourGeneratedLightOrDarkScheme.colors, // Copy it from the color codes scheme and then use it here\n};\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n")),(0,o.kt)("h3",{id:"sync-dynamic-colors-with-system-colors"},"Sync dynamic colors with system colors"),(0,o.kt)("p",null,"Using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pchmn/expo-material3-theme"},(0,o.kt)("inlineCode",{parentName:"a"},"pchmn/expo-material3-theme"))," library you can easily access the Material 3 system colors from Android 12+ devices and seamlessly integrate them into your dynamic theme. Any changes made by the user to the system colors will be automatically reflected in the theme."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"In case of incompatible devices, the library will revert to a default theme.")),(0,o.kt)("p",null,"To get started, follow the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pchmn/expo-material3-theme#installation"},"installation instructions")," and check the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useMaterial3Theme } from '@pchmn/expo-material3-theme';\nimport { useColorScheme } from 'react-native';\nimport {\n  MD3DarkTheme,\n  MD3LightTheme,\n  PaperProvider,\n} from 'react-native-paper';\nimport App from './src/App';\n\nexport default function Main() {\n  const colorScheme = useColorScheme();\n  const { theme } = useMaterial3Theme();\n\n  const paperTheme =\n    colorScheme === 'dark'\n      ? { ...MD3DarkTheme, colors: theme.dark }\n      : { ...MD3LightTheme, colors: theme.light };\n\n  return (\n    <PaperProvider theme={paperTheme}>\n      <App />\n    </PaperProvider>\n  );\n}\n")),(0,o.kt)("h2",{id:"adapting-react-navigation-theme"},"Adapting React Navigation theme"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"adaptNavigationTheme")," function takes an existing React Navigation theme and returns a React Navigation theme using the colors from Material Design 3. This theme can be passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"NavigationContainer")," so that React Navigation's UI elements have the same color scheme as Paper."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"adaptNavigationTheme(themes)\n")),(0,o.kt)("b",null,"Parameters:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"NAME"),(0,o.kt)("th",{parentName:"tr",align:null},"TYPE"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"themes"),(0,o.kt)("td",{parentName:"tr",align:null},"object")))),(0,o.kt)("p",null,"Valid ",(0,o.kt)("inlineCode",{parentName:"p"},"themes")," keys are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"reactNavigationLight")," () - React Navigation compliant light theme."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"reactNavigationDark")," () - React Navigation compliant dark theme."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"materialLight")," () - React Native Paper compliant light theme."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"materialDark")," () - React Native Paper compliant dark theme.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// App.tsx\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { PaperProvider, MD3LightTheme, adaptNavigationTheme } from 'react-native-paper';\nconst Stack = createStackNavigator();\nconst { LightTheme } = adaptNavigationTheme({ reactNavigationLight: DefaultTheme });\nexport default function App() {\n  return (\n    <PaperProvider theme={MD3LightTheme}>\n      <NavigationContainer theme={LightTheme}>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n          <Stack.Screen name=\"Details\" component={DetailsScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </PaperProvider>\n  );\n}\n")),(0,o.kt)("h2",{id:"typescript"},"TypeScript"),(0,o.kt)("p",null,"By default, TypeScript works well whenever you change the value of the built-in theme's properties. It gets more complicated when you want to extend the theme's properties or change their types. In order to fully support TypeScript, you will need to follow the guide that fits your use-case most accurately:"),(0,o.kt)("p",null,"There are two supported ways of overriding the theme:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("b",null,"Simple built-in theme overrides")," - when you only customize the values and the whole theme schema remains the same"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("b",null,"Advanced theme overrides")," - when you ",(0,o.kt)("i",null,"add new properties")," or ",(0,o.kt)("i",null,"change the built-in schema shape"))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"TypeScript support for ",(0,o.kt)("inlineCode",{parentName:"p"},"withTheme")," is currently limited to ",(0,o.kt)("b",null,"Material You (MD3)")," theme only. "),(0,o.kt)("i",null,"We are planning to provide a better support of handling custom theme overrides in future releases.")),(0,o.kt)("h3",{id:"simple-built-in-theme-overrides"},"Simple built-in theme overrides"),(0,o.kt)("p",null,"You can provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"theme")," prop with a theme object with the same properties as the default theme:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { MD3LightTheme, PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...MD3LightTheme, // or MD3DarkTheme\n  roundness: 2,\n  colors: {\n    ...MD3LightTheme.colors,\n    primary: '#3498db',\n    secondary: '#f1c40f',\n    tertiary: '#a1b2c3',\n  },\n};\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n")),(0,o.kt)("h3",{id:"advanced-theme-overrides"},"Advanced theme overrides"),(0,o.kt)("p",null,"If you need to modify the built-in theme schema by adding a new property or changing its type, you need to follow these steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Pass your theme overrides to the PaperProvider component")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import * as React from 'react';\nimport { MD3LightTheme, PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...MD3LightTheme,\n\n  // Specify a custom property\n  custom: 'property',\n\n  // Specify a custom property in nested object\n  colors: {\n    ...MD3LightTheme.colors,\n    brandPrimary: '#fefefe',\n    brandSecondary: 'red',\n  },\n};\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Create a typed ",(0,o.kt)("inlineCode",{parentName:"li"},"useAppTheme()")," hook in your project")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import * as React from 'react';\nimport {\n  MD3LightTheme,\n  PaperProvider,\n  useTheme,\n} from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...MD3LightTheme,\n\n  // Specify a custom property\n  custom: 'property',\n\n  // Specify a custom property in nested object\n  colors: {\n    ...MD3LightTheme.colors,\n    brandPrimary: '#fefefe',\n    brandSecondary: 'red',\n  },\n};\n\nexport type AppTheme = typeof theme;\n\nexport const useAppTheme = () => useTheme<AppTheme>();\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Start using the ",(0,o.kt)("inlineCode",{parentName:"li"},"useAppTheme()")," hook across your components in the whole app")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import * as React from 'react';\nimport { useAppTheme } from './App';\n\nexport default function HomeScreen() {\n  const {\n    colors: { brandPrimary },\n  } = useAppTheme();\n\n  return <View style={{ backgroundColor: brandPrimary }}>...</View>;\n}\n")),(0,o.kt)("h2",{id:"material-design-2"},"Material Design 2"),(0,o.kt)("p",null,"Using Material Design 2 is ",(0,o.kt)("b",null,"fully supported in React Native Paper v5.x"),"."),(0,o.kt)("h3",{id:"simple-setup"},"Simple setup"),(0,o.kt)("p",null,"In order to use the Material Design 2 theme you can just pass ",(0,o.kt)("inlineCode",{parentName:"p"},"{ version: 2 }")," to the PaperProvider theme prop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={{ version: 2 }}>\n      <App />\n    </PaperProvider>\n  );\n}\n")),(0,o.kt)("p",null,"Specifying ",(0,o.kt)("inlineCode",{parentName:"p"},"{ version: 2 }")," tells React Native Paper to use the built in Material Design 2 theme, so you don't have to fully extend it on your own."),(0,o.kt)("h3",{id:"advanced-setup"},"Advanced setup"),(0,o.kt)("p",null,"As with any theme, you can also specify your custom properties within the Material Design 2 theme:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { MD2LightTheme, PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nexport default function Main() {\n  const theme = {\n    ...MD2LightTheme,\n\n    // Specify a custom property\n    custom: 'property',\n\n    // Specify a custom nested property\n    colors: {\n      ...MD2LightTheme.colors,\n      primary: '#fefefe',\n    },\n  };\n\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n")),(0,o.kt)("h3",{id:"typescript-1"},"Typescript"),(0,o.kt)("p",null,"Due to the amount of changes in the theme's schema shape it falls into the ",(0,o.kt)("a",{parentName:"p",href:"#advanced-theme-overrides"},"Advanced theme overrides")," category. The steps are identical as with any advanced theme, just make sure to extend the built-in ",(0,o.kt)("inlineCode",{parentName:"p"},"MD2LightTheme")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"MD2DarkTheme")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"MD3LightTheme")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"MD3DarkTheme"),"."),(0,o.kt)("p",null,"The final example for Material Design 2 would look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import * as React from 'react';\nimport {\n  MD2LightTheme,\n  PaperProvider,\n  useTheme,\n} from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  // Extend Material Design 2 theme\n\n  ...MD2LightTheme, // or MD2DarkTheme\n\n  // Specify a custom property\n  myOwnProperty: true,\n\n  // Specify a custom nested property\n  colors: {\n    ...MD2LightTheme.colors,\n    myOwnColor: '#BADA55',\n  },\n};\n\nexport type AppTheme = typeof theme;\n\nexport const useAppTheme = () => useTheme<AppTheme>();\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n\n// App.tsx\n\nexport default function App() {\n  const { theme } = useAppTheme();\n\n  return <View style={{ backgroundColor: theme.colors.primary }} />;\n}\n")),(0,o.kt)("h3",{id:"migrating-to-material-you"},"Migrating to Material You"),(0,o.kt)("p",null,"If you are migrating from Material Design 2 (4.x and lower) to Material You (5.x), please refer to our ",(0,o.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-paper/docs/guides/migration-guide-to-5.0"},"Migration Guide")),(0,o.kt)("h2",{id:"applying-a-theme-to-a-paper-component"},"Applying a theme to a paper component"),(0,o.kt)("p",null,"If you want to change the theme for a certain component from the library, you can directly pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"theme")," prop to the component. The theme passed as the prop is merged with the theme from the ",(0,o.kt)("inlineCode",{parentName:"p"},"PaperProvider"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { Button } from 'react-native-paper';\n\nexport default function ButtonExample() {\n  return (\n    <Button raised theme={{ roundness: 3 }}>\n      Press me\n    </Button>\n  );\n}\n")),(0,o.kt)("h2",{id:"customizing-all-instances-of-a-component"},"Customizing all instances of a component"),(0,o.kt)("p",null,"Sometimes you want to style a component in a different way everywhere, but don't want to change the properties in the theme, so that other components are not affected. For example, say you want to change the font for all your buttons, but don't want to change ",(0,o.kt)("inlineCode",{parentName:"p"},"theme.fonts.labelLarge")," because it affects other components."),(0,o.kt)("p",null,"We don't have an API to do this, because you can already do it with components:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { Button } from 'react-native-paper';\n\nexport default function FancyButton(props) {\n  return (\n    <Button\n      theme={{ typescale: { labelLarge: { letterSpacing: 1 } } }}\n      {...props}\n    />\n  );\n}\n")),(0,o.kt)("p",null,"Now you can use your ",(0,o.kt)("inlineCode",{parentName:"p"},"FancyButton")," component everywhere instead of using ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," from Paper."),(0,o.kt)("h2",{id:"dark-theme"},"Dark Theme"),(0,o.kt)("p",null,"Since 3.0 we adapt dark theme to follow ",(0,o.kt)("a",{parentName:"p",href:"https://material.io/design/color/dark-theme.html"},"Material design guidelines"),". ",(0,o.kt)("br",null),"\nIn contrast to light theme, dark theme by default uses ",(0,o.kt)("inlineCode",{parentName:"p"},"surface")," colour instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"primary")," on large components like ",(0,o.kt)("inlineCode",{parentName:"p"},"AppBar")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"BottomNavigation"),".",(0,o.kt)("br",null),"\nThe dark theme adds a white overlay with opacity depending on elevation of surfaces. It uses it for the better accentuation of surface elevation. Using only shadow is highly imperceptible on dark surfaces."),(0,o.kt)("p",null,"We are aware that users often use dark theme in their own ways and may not want to use the default dark theme features from the guidelines.",(0,o.kt)("br",null),"\nThat's why if you are using dark theme you can switch between two dark theme ",(0,o.kt)("inlineCode",{parentName:"p"},"mode"),"s:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"exact")," where everything is like it was before. ",(0,o.kt)("inlineCode",{parentName:"li"},"Appbar")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"BottomNavigation")," will still use primary colour by default.",(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"adaptive")," where we follow ",(0,o.kt)("a",{parentName:"li",href:"https://material.io/design/color/dark-theme.html"},"Material design guidelines"),", the surface will use white overlay with opacity to show elevation, ",(0,o.kt)("inlineCode",{parentName:"li"},"Appbar")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"BottomNavigation")," will use surface colour as a background.")),(0,o.kt)("p",null,"If you don't use a custom theme, Paper will automatically change between the default theme and the default dark theme, depending on device settings."),(0,o.kt)("p",null,"Otherwise, your custom theme will need to handle it manually, using React Native's ",(0,o.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/appearance"},"Appearance API"),"."),(0,o.kt)("h2",{id:"gotchas"},"Gotchas"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"PaperProvider")," exposes the theme to the components via ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React's context API"),", which means that the component must be in the same tree as the ",(0,o.kt)("inlineCode",{parentName:"p"},"PaperProvider"),". Some React Native components will render a different tree such as a ",(0,o.kt)("inlineCode",{parentName:"p"},"Modal"),", in which case the components inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"Modal")," won't be able to access the theme. The work around is to get the theme using the ",(0,o.kt)("inlineCode",{parentName:"p"},"withTheme")," HOC and pass it down to the components as props, or expose it again with the exported ",(0,o.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," component."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Modal")," component from the library already handles this edge case, so you won't need to do anything."))}I.isMDXComponent=!0},14964:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/custom-colors-f699d24b3730422c7fee32413f1ac396.png"}}]);